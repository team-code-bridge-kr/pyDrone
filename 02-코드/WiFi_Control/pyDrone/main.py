# === 모듈 임포트 ===
import network  # WiFi 엑세스 포인트(AP) 설정 및 상태 확인
import socket   # UDP 소켓 통신을 위해 사용
import time     # 지연(sleep) 함수 제공
from machine import Timer  # 하드웨어 타이머: 주기적 콜백 실행
import drone    # 01Studio 드론 제어용 DRONE 클래스

# === 드론 객체 생성 ===
# flightmode=0 : 헤드리스 모드 설정 (조종기 기준 앞뒤 구분 없이 전진/후진)
드론 = drone.DRONE(flightmode=0)

# ========================================================
# 1) IMU 칼리브레이션(수평 교정) 대기 함수
#    - read_cal_data(): 3축(raw) 교정 데이터 읽기
#    - read_calibrated(): 교정 완료 여부(bool) 반환
# ========================================================
def 교정_대기():
    while True:
        데이터 = 드론.read_cal_data()  # 칼리브레이션 센서 값 확인
        print("칼리브레이션 데이터:", 데이터)
        if 드론.read_calibrated():     # True면 교정 완료
            완료데이터 = 드론.read_cal_data()
            print("교정 완료:", 완료데이터)
            break
        # 100ms 후 재확인
        time.sleep_ms(100)

# 교정 함수 호출
교정_대기()

# ========================================================
# 2) WiFi AP(엑세스 포인트) 모드 설정 함수
#    - SSID: 'pyDrone'
#    - 암호 없음(Open)
# ========================================================
def AP_시작():
    wlan_ap = network.WLAN(network.AP_IF)  # AP 인터페이스 선택
    print('"pyDrone" AP 모드로 전환 중...')
    wlan_ap.active(True)                    # AP 모드 활성화
    wlan_ap.config(essid='pyDrone', authmode=0)  # SSID 설정, 암호 없음
    # 외부 장치 연결될 때까지 대기
    while not wlan_ap.isconnected():
        pass
    # 연결 성공 후 IP 정보 출력
    print("AP 연결 완료, IP 정보:", wlan_ap.ifconfig())

# AP 모드 시작 호출
AP_시작()

# ========================================================
# 3) UDP 소켓 생성 및 바인딩
#    - listen IP: 0.0.0.0 (모든 인터페이스)
#    - 포트: 2390
# ========================================================
udp소켓 = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
udp소켓.bind(('0.0.0.0', 2390))  # 2390 포트로 바인딩
print("UDP 소켓 초기화 완료: 포트 2390 대기 중")

# ========================================================
# 4) 첫 패킷 수신: 컨트롤러(IP,포트) 정보 획득
#    이후 udp소켓.connect()로 고정 송수신 대상 설정
# ========================================================
수신데이터, 수신주소 = udp소켓.recvfrom(128)  # 최대 128바이트 읽기
print('컨트롤러 주소 확인:', 수신주소)
udp소켓.connect(수신주소)              # 이후 송수신 주소 고정
udp소켓.setblocking(False)             # 논블로킹 모드 설정

# ========================================================
# 5) 주기적 처리: 제어 명령 수신 및 상태 전송 함수
#    - CSV 형식 제어: [throttle, roll, pitch, yaw]
#    - 버튼 제어: 이륙, 착륙, 긴급정지, 사용자 기능 확장 가능
# ========================================================

def 소켓통신_콜백(타이머):
    try:
        데이터 = udp소켓.recv(128)  # 최대 128바이트 수신
        # 데이터 구조 예시: [패킷ID, x, y, z, w, 버튼]

        # 각 축 값(byte) → -100~100 범위로 변환
        제어값 = [0]*4
        for i in range(4):
            val = 데이터[i+1]
            if 100 < val < 155:
                제어값[i] = 0
            elif val <= 100:
                제어값[i] = val - 100
            else:
                제어값[i] = val - 155
        print('제어 명령 변환:', 제어값)

        # 드론 비행 제어 함수 호출
        # - rol: 좌우 기울기(roll) 제어, -100(왼쪽)~100(오른쪽)
        # - pit: 앞뒤 기울기(pitch) 제어, -100(뒤쪽)~100(앞쪽)
        # - yaw: 회전(yaw) 제어, -100(반시계)~100(시계)
        # - thr: 상승/하강(throttle) 제어, 0(멈춤)~100(최대)
        드론.control(
            rol=제어값[0],
            pit=제어값[1],
            yaw=제어값[2],
            thr=제어값[3]
        )

        # 버튼 입력 처리
        버튼코드 = 데이터[5]
        if 버튼코드 == 24:           # Y 버튼: 이륙
            print('이륙 명령')
            드론.take_off(distance=120)  # 120cm 고도 유지
        elif 버튼코드 == 72:         # A 버튼: 착륙
            print('착륙 명령')
            드론.landing()
        elif 버튼코드 == 40:         # B 버튼: 기능 확장용 슬롯
            print('B 버튼 작동 (확장 가능)')
        elif 버튼코드 == 136:        # X 버튼: 긴급 정지
            print('긴급 정지')
            드론.stop()

        # 드론 상태(9개 값) 읽기
        상태 = 드론.read_states()
        print('현재 상태 값:', 상태)

        # 상태를 2바이트씩 분할하여 18바이트 버퍼 생성
        buf = []
        for s in 상태:
            raw = s + 32768        # 부호를 제거하기 위해 offset
            hi = raw // 256         # 상위 바이트
            lo = raw % 256          # 하위 바이트
            buf += [hi, lo]

        # UDP를 통해 컨트롤러로 상태 전송
        udp소켓.send(bytes(buf))

    except OSError:
        # 데이터 수신 실패 시 무시하고 다음 주기로 넘어감
        pass

# ========================================================
# 6) 주기적 콜백 등록: 50ms(20Hz) 주기
# ========================================================
타이머 = Timer(1)
타이머.init(
    period=50,            # 50ms 주기
    mode=Timer.PERIODIC,  # 반복 모드
    callback=소켓통신_콜백
)